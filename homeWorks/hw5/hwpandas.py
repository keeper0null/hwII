# -*- coding: utf-8 -*-
"""hwPandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ubAO_4PzxzI-O57RH6EA88dKNJbG3EQ

# 5. Домашнее задание по теме Pandas – продвинутый
## Формулировка задания:
Необходимо загрузить и обработать предложенный датасет (Титаник), провести аналитику данных с помощью фреймворка Python Pandas.
## Планируемый результат:
1. Датасет загружен в Colab  
2. В датасете отсутствуют пустые ячейки  
3. Представлена простая аналитика по датасету  

## Описания плана работы:
1. Создать новый ноутбук в Colab
2. Сохранить датасет в Google диске и загрузить в ноутбук Colab
https://www.kaggle.com/datasets/yasserh/titanic-dataset/code  
*Загрузить датасет по ссылке из интернета (репозитория Kaggle)
3. Перечень и описание столбцов:

```markdown
Поле     | Описание
---------|-----------------------------------------------------
Survived | выжил (1-да, 0- нет)
Pclass   | Класс круиза
Name     | ФИО
Sex      | Пол
Age      | Возраст
SibSp    | Число братьев, сестер или супругов на борту у человека
Parch    | Количество родителей или детей, с которыми путешествовал каждый пассажир
Ticket   | Номер билета
Fare     | Цена билета
Cabin    | Номер каюты
Embarked | Порт посадки

```
4. Определить количество пустых ячеек
5. *Заполнить пустые ячейки используя любую логику замещения данных
6. Если пункт 5 не выполнен, то удалить строки имеющие пустые ячейки.
7. По каждому признаку произвести аналитику:
  1. Количество уникальных значений
  2. Минимальное и максимальное значение
8. *С помощью аналитики определить влияние всех признаков на признак Survived (выживание).  
Пример: Parch и SibSP отрицательно влияли на выживание при крушении , так как чем больше эти параметры тем ниже процент выживания (одиночке выжить проще).

Результатом домашнего задания будет Таблица в Colab с комментариями в качестве
ответов на пункты ДЗ.

Перечень инструментов, необходимых для реализации деятельности:  
1) Google Colab https://colab.research.google.com/  
2) *PyCharm
"""

# подключение библиотек
import pandas as pd
import seaborn as sns

#чтоб не подключать диск с датасетом, загружаю по ссылке
import gdown
shareUrl = 'https://drive.google.com/file/d/1HtY8F6wKSBVn8CKSOOGmVDsynlAwhI7f/view?usp=sharing'
token = shareUrl[32:shareUrl.find('/view?usp=sharing')]
url = f'https://drive.google.com/uc?export=download&id={token}'
gdown.download(url, 'Titanic-Dataset.csv', quiet=False)

# загрузка данных
df = pd.read_csv('/content/Titanic-Dataset.csv')
df.head()

# 4. Определить количество пустых ячеек
print(df.isna().sum())
print(f'Total: {df.isna().sum().sum()}')

# посмотрим информацию по таблице
print(df.info())

# 5. *Заполнить пустые ячейки используя любую логику замещения данных
# 6. Если пункт 5 не выполнен, то удалить строки имеющие пустые ячейки.
# для возраста возьмем среднее значение
# для порта первое значение
# каюту удалим т.к. большая часть значений пустая
df = df.fillna({'Age' : df.Age.mean()})
df = df.drop(labels='Cabin', axis=1)
df = df.fillna(method='ffill')
print(df.isna().sum())

# добавлю новое поле для удобства поиска корреляции
sex_map = {'male' : 1,
           'female' : 0}
df['is_male'] = df['Sex'].map(sex_map)
df

#7. По каждому признаку произвести аналитику:
#  1. Количество уникальных значений
#  2. Минимальное и максимальное значение
category_cols = df.select_dtypes(include=['object'])
category_cols_names = category_cols.columns.tolist()
print(f'категориальные столбцы: {category_cols_names}\n')
for col in category_cols_names:
    print(f'информация о столбце {col}:')
    print(f'количество уникальных значений: {category_cols[col].nunique()}')
    print(f'масимальное значение: {category_cols[col].max()}')
    print(f'минимальное значение: {category_cols[col].min()}')

# небольшая неоднозначность по заданию: "По каждому признаку" если признак это категориальный параметр то max и min для этого малоинформативен
# поэтому дополнительно выведу информацию по числовым значениям
category_int = df.select_dtypes(include=['int64','float64']) #выбрали столбцы с интервальные переменными
category_int_names = category_int.columns.tolist()
print(f'\n\nинтервальные столбцы: {category_int_names}\n')

for col in category_int_names:
    print(f'информация о столбце {col}:')
    print(f'количество уникальных значений: {category_int[col].nunique()}')
    print(f'максимум: {category_int[col].max()}')
    print(f'минимум: {category_int[col].min()}')

df.describe(include = 'all')

# 8. *С помощью аналитики определить влияние всех признаков на признак Survived (выживание).
# потстроим матрицу корреляций
matrix_corr = df.corr();

# вывод корреляционной матрицы
sns.heatmap(matrix_corr, annot=True, cmap='coolwarm');

print('При общем отношении ж-м')
print(df.groupby(['Sex']).size().transform(lambda x: x/x.sum()))
print('Среди выживших явно преобладает количество женщин')
print(df.groupby(['Survived', 'Sex']).size().transform(lambda x: x/x.sum()))

print('Схожая ситуация наблюдается по соотношениям выживших пассажиров более дорогого класса')
print(df.groupby(['Pclass']).size().transform(lambda x: x/x.sum()))
print(df.groupby(['Survived', 'Pclass']).size().transform(lambda x: x/x.sum()))

print(df.groupby(['Parch']).size())
print(df.groupby(['Survived', 'Parch']).size())
print(df.groupby(['Survived', 'Parch']).size() / df.groupby(['Parch']).size())
print('Количество выживших одиночек - по отношению к изначальному их числу, наоборт показывает меньший процент выживания по сравнению с людей с детьми')

print(df.groupby(['SibSp']).size())
print(df.groupby(['Survived', 'SibSp']).size())
print(df.groupby(['Survived', 'SibSp']).size() / df.groupby(['SibSp']).size())
print('Аналогичная ситуация и по соотношениям одиночек и семейных')

#для удобства анализа возраста добавим возрастную группу
df['age_group'] = df['Age'].apply(lambda x: 0 if x < 7 else 1 if x <= 18 else 2 if x < 55 else 3 )
df

print(df.groupby(['age_group']).size())
print(df.groupby(['Survived', 'age_group']).size())
print(df.groupby(['Survived', 'age_group']).size() / df.groupby(['age_group']).size())
print('По резултату видно что в первую очередь спасали детей и подростков')

"""```markdown
Поле     | Результат анализа на выживание
---------|-----------------------------------------------------
Pclass   | Класс круиза влияет на резальтат - чем выше класс тем больше шансов выжить
Sex      | Пол однозначно влияет на выживание - в первую очередь спасали женщин
Age      | Возраст повлиял на результаты выживания - в первую очередь спасали детей и подростков
SibSp    | По этому параметру верно обратное утверждение - у одиночки меньше шансов выжить
Parch    | По этому параметру верно обратное утверждение - у одиночки меньше шансов выжить

```
"""