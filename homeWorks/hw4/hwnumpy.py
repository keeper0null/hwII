# -*- coding: utf-8 -*-
"""hwNumPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LCfn36g8CUvU6yQtpNPEBKGeD2yddpJB

# Домашнее задание №4
# NumPy
## Формулировка задания:  
Научиться работать с фреймворком NumPy
## План работы:
1) Создать ноутбук в Google Colab  
2) Решить предложенные математические задачи с помощью NumPy (1 и 2 задачи обязательны к выполнению, остальные желательны)  
3) Открыть доступ для чтения ноутбука по ссылке  
4) Прикрепить ссылку на ноутбук в качестве ответа на домашнее задание на
платформе learn.innopolis.university  
## Перечень инструментов, необходимых для реализации деятельности:
Google Colab https://colab.research.google.com/
"""

# подключение библиотек
import numpy as np

"""## Задача 1
1. Выполнить операции над матрицами:  
Даны матрицы  
$$
A = \left(\begin{array}{cc}
 1 & 2 & 1 \\
-2 & 1 & 1
\end{array}\right),
B = \left(\begin{array}{cc}
 3 & 1 \\
-1 & 0 \\
 2 & 4
\end{array}\right),
C = \left(\begin{array}{cc}
-2 &  2 \\
 1 & -1 \\
 1 &  2
\end{array}\right)
$$
Найти  
A + 2B  
B + 2C
"""

A = np.matrix([[ 1,  2,  1],
               [-2,  1,  1]])
B = np.matrix([[ 3,  1],
               [-1,  0],
               [ 2,  4]])
C = np.matrix([[-2,  2],
               [ 1, -1],
               [ 1,  2]])

# матрицу А траспонируем т.к. Складывать допускается только матрицы одинаковой размерности.
A.transpose() + 2 * B

B + 2 * C

"""## Задача 2  
1. Создать матрицу размером 8х8 элементов, состоящую из нулей. Заполнить
эту матрицу значениями, расположенными в шахматном порядке.  
Задачу решить через срезы массива NumPy (должно получиться буквально двумя
командами).  
Должно получиться так:
$$
\left(\begin{array}{cc}
0 & 1 & 0 & 1 & 0 & 1 & 0 & 1 \\
1 & 0 & 1 & 0 & 1 & 0 & 1 & 0 \\
0 & 1 & 0 & 1 & 0 & 1 & 0 & 1 \\
1 & 0 & 1 & 0 & 1 & 0 & 1 & 0 \\
0 & 1 & 0 & 1 & 0 & 1 & 0 & 1 \\
1 & 0 & 1 & 0 & 1 & 0 & 1 & 0 \\
0 & 1 & 0 & 1 & 0 & 1 & 0 & 1 \\
1 & 0 & 1 & 0 & 1 & 0 & 1 & 0 \\
\end{array}\right)
$$
2. Вывести полученную матрицу на экран.
"""

matrix = np.zeros((8,8), dtype='int32')
matrix[::2, 1::2] = 1
matrix[1::2, ::2] = 1
print(matrix)

"""## Задача 3*
1. Сформировать два вектора: первый длиной 15 элементов со значениями от 0 до 1,4 с
шагом 0,1; второй – длиной 6 элементов со значениями от 1 до 6.
2. Преобразовать первый вектор в матрицу 5х3, а второй – в матрицу 3х2. Выполнить
перемножение этих матриц. Сами матрицы и результат их перемножения вывести на экран.
"""

vec01 = np.arange(start = 0, stop = 1.5, step = 0.1, dtype="float")
print(vec01)
vec02 = np.linspace(start = 1, stop = 6, num = 6, dtype="int")
print(vec02)

matrix53 = vec01.reshape(5, 3)
print(matrix53)
matrix32 = vec02.reshape(3, 2)
print(matrix32)
print(np.dot(matrix53, matrix32))

"""## Задача 4*
1. Сформировать вектор из целых чисел (тип элементов должен быть int32) размерностью 36 и значениями 1, 3, 5, 7, … и так далее.  
2. Выделить из этого вектора все элементы со значениями кратными 3. Вывести результат на экран (исходный вектор и с кратными числами).

"""

vec36 = np.arange(start = 1, stop = 72, step = 2, dtype="int32")
vec36mod3 = vec36[vec36 % 3 == 0]
print(vec36)
print(vec36mod3)