# -*- coding: utf-8 -*-
"""hwMatPlotLib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s-HPa1-fHTcF5xRfwyofuPMEpjYA4tnN

# 6. Домашнее задание по теме
# Визуализация данных (MatPlotLib)
## Формулировка задания:
С помощью фреймворка MatPlotLib визуализировать результаты аналитики из домашнего задания №5.
## Планируемый результат:
В ноутбуке Colab под каждой аналитическим исследованием имеется графическое
изображение результатов исследования

## Описания плана работы:
Открыть ноутбук в Сolab из ДЗ №5.
Результаты п.8 с помощью matplotlib визуализировать.
Пример: Количество выживших и умерших в зависимости от возраста (*возраст берется в интервалах 10 лет)

## Перечень инструментов, необходимых для реализации деятельности:  
1) Google Colab https://colab.research.google.com/  
2) Matplotlib
"""

# подключение библиотек
import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

#чтоб не подключать диск с датасетом, загружаю по ссылке
import gdown
shareUrl = 'https://drive.google.com/file/d/1HtY8F6wKSBVn8CKSOOGmVDsynlAwhI7f/view?usp=sharing'
token = shareUrl[32:shareUrl.find('/view?usp=sharing')]
url = f'https://drive.google.com/uc?export=download&id={token}'
gdown.download(url, 'Titanic-Dataset.csv', quiet=False)

# загрузка данных
df = pd.read_csv('/content/Titanic-Dataset.csv')
df.head()

# 4. Определить количество пустых ячеек
print(df.isna().sum())
print(f'Total: {df.isna().sum().sum()}')

# посмотрим информацию по таблице
print(df.info())

# 5. *Заполнить пустые ячейки используя любую логику замещения данных
# 6. Если пункт 5 не выполнен, то удалить строки имеющие пустые ячейки.
# для возраста возьмем среднее значение
# для порта первое значение
# каюту удалим т.к. большая часть значений пустая
df = df.fillna({'Age' : df.Age.mean()})
df = df.drop(labels='Cabin', axis=1)
df = df.fillna(method='ffill')
print(df.isna().sum())

# добавлю новое поле для удобства поиска корреляции
sex_map = {'male' : 1,
           'female' : 0}
df['is_male'] = df['Sex'].map(sex_map)
df

df.describe(include = 'all')

# 8. *С помощью аналитики определить влияние всех признаков на признак Survived (выживание).
# потстроим матрицу корреляций
matrix_corr = df.corr();

# вывод корреляционной матрицы
sns.heatmap(matrix_corr, annot=True, cmap='coolwarm');
plt.title("Матрица корреляции")
plt.show()

print('При общем отношении ж-м')
print(df.groupby(['Sex']).size().transform(lambda x: x/x.sum()))
print('Среди выживших явно преобладает количество женщин')
print(df.groupby(['Survived', 'Sex']).size().transform(lambda x: x/x.sum()))

df.groupby(['Survived', 'Sex']).size().transform(lambda x: x/x.sum()).plot()

print('Схожая ситуация наблюдается по соотношениям выживших пассажиров более дорогого класса')
print(df.groupby(['Pclass']).size().transform(lambda x: x/x.sum()))
print(df.groupby(['Survived', 'Pclass']).size().transform(lambda x: x/x.sum()))

df.groupby(['Survived', 'Pclass']).size().transform(lambda x: x/x.sum()).hist()

print(df.groupby(['Parch']).size())
print(df.groupby(['Survived', 'Parch']).size())
print(df.groupby(['Survived', 'Parch']).size() / df.groupby(['Parch']).size())
print('Количество выживших одиночек - по отношению к изначальному их числу, наоборт показывает меньший процент выживания по сравнению с людей с детьми')

plt.violinplot(df.groupby(['Survived', 'Parch']).size())

print(df.groupby(['SibSp']).size())
print(df.groupby(['Survived', 'SibSp']).size())
print(df.groupby(['Survived', 'SibSp']).size() / df.groupby(['SibSp']).size())
print('Аналогичная ситуация и по соотношениям одиночек и семейных')

#для удобства анализа возраста добавим возрастную группу
df['age_group'] = df['Age'].apply(lambda x: 0 if x < 7 else 1 if x <= 18 else 2 if x < 55 else 3 )
df

print(df.groupby(['age_group']).size())
print(df.groupby(['Survived', 'age_group']).size())
print(df.groupby(['Survived', 'age_group']).size() / df.groupby(['age_group']).size())
print('По резултату видно что в первую очередь спасали детей и подростков')

sns.displot(df[['Survived', 'age_group']])

"""```markdown
Поле     | Результат анализа на выживание
---------|-----------------------------------------------------
Pclass   | Класс круиза влияет на резальтат - чем выше класс тем больше шансов выжить
Sex      | Пол однозначно влияет на выживание - в первую очередь спасали женщин
Age      | Возраст повлиял на результаты выживания - в первую очередь спасали детей и подростков
SibSp    | По этому параметру верно обратное утверждение - у одиночки меньше шансов выжить
Parch    | По этому параметру верно обратное утверждение - у одиночки меньше шансов выжить

```
"""